1，原生态的jdbc程序中的问题总结：
a）数据库连接，使用时创建，不使用就立即释放，对书库进行频繁的开启和关闭，影响数据库的性能。
---解决方案： 使用连接池
b）将sql语句硬编码到了java语句中，如果要修改sql语句，需要重新编译java代码，不利于维护。
---解决方案： 利用xml配置sql
c）向prepareStatement中设置参数，对占位符的位置跟设置参数硬编码到了java文件中，不利于维护。
---解决方案： 利用xml配置占位符跟参数
d）从resultSet中遍历结果集的时候，将获取表的字段名硬编码。
---解决方案： 将查询的结果集自动映射成为java对象。

2，mybatis
mybati是Apache下面的一个顶级项目。
mybatis的目的是让程序员将主要的精力放在sql上，通过mybatis提供的映射方式，自由灵活的生成（半自动化，大部分需要程序员编写sql）满足需求的sql语句。
mybatis可以将prepareStatement中的输入参数自动进行输入映射，将结果查询结果自动进行输出映射成java对象。

3，mybatis框架组成
SqlMapConfig.xml（名称可改）：是mybatis的全局配置，配置了数据源、事务等mybati运行环境。配置映射文件：xxxmapper.xml。
SqlSessionFactory： 会话工厂，用于创建SqlSession。
SQLSession： 会话，用于操作数据库，发出增删改查操作。
Executor： 执行器，存在于SqlSession的内部，SqlSession通过它进行sql的发送。
mapped statement： 底层封装对象，对数据库存储进行封装，包括sql语句、输入参数、输出结果类型。

4，使用mybatis步骤
a）编写mapper文件，将其添加到总的配置文件
b）在java类中：
---通过 Resources.getResourceAsStream()得到配置留
---通过 new SqlSessionFactoryBuilder().build(inputStream)返回session工厂
--- sqlSession = sqlSessionFactory.openSesion()
---通过得到的session操作： selectOne("namespace.selectid","parameter")  selectList insert  delete updae
---sqlSession.commit()
---sqlSession.close()

5,返回最新插入的主键值
在insert标签下面可以添加 <selectKey keyProperty="id(这里是传入参数的属性名)" order="AFTER" resultTyep="java.lang.Integer"> select last_insert_id() </selectKey>
---如果不是自增主键，需要通过uuid设置主键，上面的order是BEFORE。插叙语句是 select uuid()
---如果是oracle，上面order也是before，通过语句：select 序列名.nextval() 得到

6，mybatis与hibernate的比较
hibernate是一个标准的ORM框架，入门门槛较高，不需要程序员写sql，sql自动生成。对sql语句进行优化比较困难。hibernate比较适合于需求变化不多的系统，例如erp rom oa
mybatis专注于sql本身，需要程序员编写sql，sql修改优化比较方便。mybatis是一个不完全的ORM框架，虽然程序员自己写sql，但是mybatis也可以实现映射。适合需求变化比较多的项目，比如互联网项目。

7，对于SqlSessionFactory的单例
使用单例模式管理SqlSessionFactory，工厂一旦创建了，就使用一个实例，如跟spring整合，交给spring管理为单例。

8，SqlSession的线程安全问题
SqlSession里面除了有操作数据库的方法例如selectOne，还有数据域属性，这就造成了这个类的线程不安全。所以SqlSession最佳的应用场合是定义在方法体里面。

9，原始的dao mybatis相比mapper的方式开发的问题
a）dao接口实现类中存在大量的模板（重复）代码
b) 在调用sqlsession的方法是，将要调用的statement的id硬编码了
c）调用sqlsession方法的时候，由于SqlSession的方法使用的是泛型，如果传入的参数类型不对，不会再编译阶段报错，不利于程序开发。

10，mapper代理
程序员编写自己的mapper接口，mybatis可以自动实例化这个接口。
---mapper编写规范：
--namespace为类名的全限定名。
--mapper.java中的方法名跟mapper.xml中的statement的id一致。
--mapper.java中的参数类型跟mapper.xml中的参数类型一致
--mapper.java中的返回类型跟mapper.xml中的返回类型一致
------在调用的地方通过sqlSession.getMapper(xx.class)得到操作对象。
*****note： 关于mybatis如果选择是selectOne还是selectList的问题： 如果在接口的签名上面标明的是返回list就会调用selectList，如果签名上返回是单个对象就调用selectOne。

11，关于mybatis映射文件中参数只能指定一个问题
如果要传递多个参数，可以使用自定义的pojo实现，在映射文件里面可以使用ognl表达式。
****note：持久层的方法参数可以为包装类型、map等。但是service层的方法不建议使用包装类型（service供controller调用，所以尽量少的直接使用包装类型的参数），因为这样不利于业务层的可扩展。

12，关于SqlMapConfig.xml中的属性
a）properties属性，可以通过它的Resource属性加载db.properties,然后使用el表达式在xml中使用。properties下面还可以添加一些新的属性，例如<properties><property name="jdbc.driver" value="xx"></properties>
********note: 在mybatis中加载属性的优先级是： sqlMapConfig.xml及其他的映射文件 中的parameterType传递的属性 > properties文件中  >  properties标签下面定义的property。所以一般应该尽量的通过命名的唯一性避免三个地方的值的干扰，除非这是程序员的本来意愿。
------note： 如果存在properties文件，一般就要规避在SqlMapConfig.xml中再去定义properties。
b）settings属性，可以设置mybatis运行的全局参数。例如开启二级缓存之类的。
c）typeAliases
---在映射文件中，映射类型需要给出类型的全路径名，这个不方便开发，可以通过定义别名简化。可以通过typeAliases定义一些类型的别名提供
d) typeHandlers,类型处理器。mybatis中通过typeHandlers完成jdbc到java类型的转换。
e）mappers
----可以通过mapper标签的Resource属性执行mapper.xml
----也可以通过mapper的 class属性 指定一个类名，前提是通过mapper代理，这时mapper.xml需要跟mapper.java在同一个目录下面。
----也可以mappers下面的package标签，指定一个包，mybatis自动扫描这个包下面的所有mapper接口进行加载。同样，这个也要符合是mapper代理，而且有同一目录要求。

13，输入映射
通过parameterType可以传递简单类型 pojo类型、包装的pojo类型以及map类型。

14，输出映射
通过resultType指定，可以是简单类型 pojo类型、包装的pojo或者是map。
******note：进行映射的时候如果查询出来的列名跟pojo里面的属性名不完全一致，就会得不到这一项的值，如果要得到它，可以通过在查询中添加别名的方式获得。如果没有一个列名跟属性名一致，会返回一个空对象null

15，动态sql
a）if标签 where标签 sql标签  include标签
<!----定义一个sql片段，一般是基于单表来进行sql片段的定义，这样可以实现高度的重用--->
<sql id="query_user_where">
	<if test="null != person">
		<if test="person.username != null">
			and user.username=#{person.username}
		</if>
	</if>
</sql>

<select id="xxx" parameterType="person" resultType="">
	select * from user
	<where>
	<!----where 标签会自动的忽略第一个and，这样传入的多个都有and不会出错----->
		<!----引入一个sql片段---->
		<include refid="query_user_where"/>  <!---如果这个片段不在同一个mapper也就是同一个namespace下面，那么引入需要使用namespace.sqlid----->
	</where>
</select>

b）foreach标签
<sql>
	<!----实现的and (id=xx or id = xx) ---->
	<!---要遍历的是ids属性，遍历项取名为id，拼接字符串前面是 and （，尾巴是 ）,每两项中间用or连接---->
  <foreach collection="ids" item="id" open="and （" close=")" separator="or" >
  	 id=#{id}
  </foreach>

  <!--实现 and id in( xx, xx)-->
  <foreach collection="ids" item="id" open="and id in(" close=")" separator=",">
  		#{id}
  </foreach>
</sql>


16, 高级映射： one-one one-many many-many
a）one to one:
--resultType：使用resultType实现比较简单，如果pojo中没有包括查询出来的列名，需要增加列名对应的属性，即可完成映射。也就是说可能需要对pojo进行包装
--resultMap：需要单独定义resultMap，实现较麻烦，如果对查询的结果由特殊的要求，使用resultMap可以将关联查询映射到pojo属性中（例如映射到一个list属性里面）。resultMap是可以实现延迟加载的，而resultType没有实现延迟加载的功能。
--note： 如果是一对一，resultMap里面对关联属性映射使用的是association，而如果是一对多使用的是collection

17，延迟加载：
a）首先需要开启懒加载的支持：
在sqlMapConfig.xml里面设置settings：
<settings>
	<setting name="lazyLoadingEnable" value="true"/> 这一项默认是false，也就是不支持懒加载
	<setting name="aggressiveLazyLoading" value="false"/>  这一项默认是true（积极的懒加载），会导致提前加载。
</setttings>
b）可以通过在resultmap里面将其他关联对象或者关联对象数组，通过association或者collection关联，同时设置这个association或者collection的select属性（可能要带上包名）跟column属性，这里的column属性被用作要关联查询的select的语句的传入参数。默认association和collection的fetchType是“lazy”的。

18，一级缓存： SqlSession级别的缓存，也就是同一个session同一个mapper查询同一条语句（包括参数）会直接从这个session里面的一个hashmap里面取值。这个hashmap的key的形式中包含了hash值+当前mapper方法的全限定名（所以说非mapper开发是不支持懒加载的）+当前的slq语句+参数。
----note： 如果进行了update、insert、delete操作，会导致清空（刷新）当前缓存区，这样保证了对象都是最新的。

19，二级缓存： 跨SqlSession级别，同一个mapper（准确的说是同一个namespace）的不同session调用同一个方法并且参数相同就会得到二级缓存里面的结果。
----mybatis里面开启一个mapper的cache的方法是在mapper下面添加cache标签 <cache/>，如果要设置的更具体可以修改默认的cache标签的属性，默认的cache标签的size是1024。
----一个SqlSession只有在关闭的时候才会将它里面的对象刷新到二级缓存里面。
---如果一个session进行了insert、update、delete操作，会导致二级缓存中这个namespace区域的缓存被清空（刷新缓存），这样避免了数据的脏读。
----可以通过设置mapper.xml中的update、insert、delete标签的属性：flushCache=‘false’取消这个sql语句导致的刷新缓存，不过一般不去进行这样的设置，因为一般都需要进行缓存的更新避免脏读。


20，使用ehcache：如果有多个服务器，这时就需要对缓存进行分布式管理（mybatis没提供分布式缓存），而且mybatis不是专业的缓存管理，所以应该使用更专业的缓存管理工具，例如redis、ehcace。
---mybatis和ehcache整合，只需要实现mybatis的Cache接口。
---ehcache提供了实现Cache接口的类。
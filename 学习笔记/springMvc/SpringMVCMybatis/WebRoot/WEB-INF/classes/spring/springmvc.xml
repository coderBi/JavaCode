<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<!-- 扫描包 -->
	<context:component-scan base-package="ssm.controller" />

	<!-- 视图解析器 解析jsp，默认使用jstl标签.所以classpath下面得有jstl的包 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- jsp文件存放位置 前缀 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<!-- jsp文件后缀 -->
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 使用springmvc的注解驱动可以代替上面的注解的适配器与映射器的配置。这样更好 -->
	<!-- conversion-service 给适配器指定一个格式转换器，用于处理input中提交的字符串到后台数据的格式转换 -->
	<mvc:annotation-driven conversion-service="conversionService"
		validator="validator"></mvc:annotation-driven>

	<!-- 自定义参数绑定 -->
	<!-- class为spring提供的converter对外的接口 -->
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<list>
				<!-- 日期转换器 -->
				<bean class="ssm.controller.converter.CustomDateConverter" />
			</list>
		</property>
	</bean>

	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!--hibernate校验器 -->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!--指定校验使用的资源文件，在文件中配置校验错误信息。如果不指定默认使用的classpath下面的ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
	<!--校验错误信息文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!--资源文件名 -->
		<property name="basenames">
			<list>
				<value>classpath:CustomValidationMessages</value>
			</list>
		</property>
		<!--资源文件编码 -->
		<property name="fileEncodings" value="utf-8" />
		<!--对资源文件内容缓存时间，单位秒 -->
		<property name="cacheSeconds" value="120" />
	</bean>

	<!-- 全局异常处理器 springmvc只能有一个全局异常处理器 如果一个类实现了HandlerExceptionResolver接口 就是一个全局异常处理器 -->
	<bean class="ssm.exception.CustomExceptionResolver" />

	<!-- 文件上传 解析器 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
			<!-- 设置最大上传尺寸 -->
			<property name="maxUploadSize">
				<value>5242880</value>
			</property>
	</bean>
	
	<!-- 静态资源解析 -->
	<!-- 网站根目录的js下面寻找相应的js文件 -->
	<mvc:resources location="/js/" mapping="/js/**"/>
	
	<!-- 配置全局的拦截器 -->
	<mvc:interceptors>
		<!-- 多个拦截器  顺序执行 -->
		<mvc:interceptor>
			<!-- path如果配置成 /**表示可以拦截到根节点的请求以及子路径的请求. 如果配置为 /* 那么只能拦截到根的url，不能拦截到子路径 -->
			<mvc:mapping path="/**"/>
			<bean class="ssm.interceptor.HandlerInterceptor1"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="ssm.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="ssm.interceptor.HandlerInterceptor2"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
</beans>